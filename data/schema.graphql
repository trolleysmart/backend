type MultiBuy {
  count: Int
  price: Float
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

type Query {
  user(username: String!): User

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type Special implements Node {
  id: ID!
  description: String
  imageUrl: String
  barcode: String
  specialType: String
  price: Float
  wasPrice: Float
  multiBuy: MultiBuy
  storeName: String
  storeImageUrl: String
}

# A connection to a list of items.
type SpecialConnection {
  # Information to aid in pagination.
  pageInfo: PageInfo!

  # A list of edges.
  edges: [SpecialEdge]
}

# An edge in a connection.
type SpecialEdge {
  # The item at the end of the edge
  node: Special

  # A cursor for use in pagination
  cursor: String!
}

type User implements Node {
  id: ID!
  username: String
  specials(after: String, first: Int, before: String, last: Int, description: String): SpecialConnection
}
